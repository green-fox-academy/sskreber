// LINK: 
// https://lagunita.stanford.edu/courses/DB/SQL/SelfPaced/
// courseware/ch-sql/seq-exercise-sql_social_query_core/

// Q01
// Find the names of all students who are friends with someone // named Gabriel. 

SELECT Highschooler1.name
FROM Highschooler Highschooler1
JOIN Friend ON Highschooler1.ID = Friend.ID1
JOIN Highschooler Highschooler2 ON Highschooler2.ID = Friend.ID2
WHERE Highschooler2.name IS "Gabriel";

// Q02
// For every student who likes someone 2 or more grades younger // than themselves, return that student's name and grade, and 
// the name and grade of the student they like. 

SELECT H1.name, H1.grade, H2.name, H2.grade
FROM Highschooler H1
JOIN Likes ON H1.ID = Likes.ID1
JOIN Highschooler H2 ON H2.ID = Likes.ID2
WHERE H1.grade >= H2.grade + 2;

// Q03
// For every pair of students who both like each other, return // the name and grade of both students. Include each pair only // once, with the two names in alphabetical order. 

// !!! doesnt work yet!!
SELECT H1.name, H1.grade, H2.name, H2.grade
FROM Highschooler H1
JOIN Likes ON H1.ID = Likes.ID1
JOIN Highschooler H2 ON H2.ID = Likes.ID2
WHERE (H1.ID = Likes.ID1) AND (H2.ID = Likes.ID2) 
AND (H2.ID = Likes.ID1) AND (H1.ID = Likes.ID2)



// Q04
// Find all students who do not appear in the Likes table (as a // student who likes or is liked) and return their names and 
// grades. Sort by grade, then by name within each grade. 

SELECT Highschooler.name, Highschooler.grade 
FROM Highschooler
WHERE Highschooler.ID NOT IN
(
SELECT 
ID1 FROM Likes
UNION
SELECT ID2 FROM Likes
)
ORDER BY Highschooler.grade, Highschooler.name;

// Q05
// For every situation where student A likes student B, but we // have no information about whom B likes (that is, B does not // appear as an ID1 in the Likes table), return A and B's names // and grades. 

SELECT H1.name, H1.grade, H2.name, H2.grade 
FROM Highschooler H1
JOIN Likes ON Likes.ID1 = H1.ID
JOIN Highschooler H2 ON Likes.ID2 = H2.ID
WHERE H1.ID = Likes.ID1 AND 
H2.ID NOT IN
(SELECT ID1 FROM Likes);


